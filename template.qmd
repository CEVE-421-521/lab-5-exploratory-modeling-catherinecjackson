---
title: "Lab 5: Sea-Level Rise"
author: "<Your Name (NetID)>"
jupyter: julia-1.10
date: 2024-02-16

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

date-format: "ddd., MMM. D"
bibliography: references.bib
---

# Setup

## The usual

As always:

1. Clone the lab repository to your computer
1. Open the lab repository in VS Code
1. Open the Julia REPL and activate, then instantiate, the lab environment
1. Make sure you can render: `quarto render template.qmd` in the terminal.
    - If you run into issues, try running `] build IJulia` in the Julia REPL (`]` enters the package manager).
    - If you still have issues, try opening up `blankfile.py`. That should trigger VS Code to give you the option to install the Python extension, which you should do. Then you should be able to open a menu in the bottom right of your screen to select which Python installation you want VS Code to use.


## Load packages

```{julia}
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using Plots
using StatsPlots
using Unitful

Plots.default(; margin=5Plots.mm)
```

## Local package

```{julia}
using Revise
using HouseElevation
```

# Build the House Object

```{julia}
haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame)
```

```{julia}
#| output: false
house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    desc = "two story, no basement, Structure"
    occ = "RES1"
    src = "USACE - Galveston"
    row = @rsubset(haz_fl_dept, :Description == desc, :Occupancy == occ, :Source == src)[1, :] # select the row I want
    area = 881u"ft^2"
    height_above_gauge = 4*u"ft" # the House() constructor could not input a float, so I had to round 4.3 down to 4 so that it would be an int type instead
    value_usd = 194_456
    # combine the row with the other information to create the House object
    House(
        row;
        area=area,
        height_above_gauge=height_above_gauge,
        value_usd=value_usd,
    )
end

display(house)
```

```{julia}
let
    depths = uconvert.(u"ft", (-7.0u"ft"):(1.0u"inch"):(30.0u"ft"))
    damages = house.ddf.(depths) .* house.value_usd ./ 1000
    scatter(
        depths,
        damages;
        xlabel="Flood Depth",
        ylabel="Damage (Thousand USD)",
        label="$(house.description)\n($(house.source))",
        legend=:bottomright,
        size=(800, 400),
        yformatter=:plain, # prevents scientific notation
    )
end
```


```{julia}
let
    elevations = 0u"ft":0.25u"ft":14u"ft"
    costs = [elevation_cost(house, eᵢ) for eᵢ in elevations]
    scatter(
        elevations,
        costs ./ 1_000;
        xlabel="Elevation",
        ylabel="Cost (Thousand USD)",
        label="$(house.description)\n($(house.source))",
        legend=:bottomright,
        size=(800, 400),
        yformatter=:plain, # prevents scientific notation
    )
end
```

# Read in SLR


```{julia}
#| output: false
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end
println("There are $(length(slr_scenarios)) parameter sets");
```

We can plot these scenarios to get a sense of the range of sea-level rise we might expect.

```{julia}
let
    years = 1900:2150
    p = plot(;
        xlabel="Year",
        ylabel="Mean sea-level (ft)\nwith respect to the year 2000",
        label="Oddo et al. (2017)",
        legend=false
    )
    for s in rand(slr_scenarios, 250)
        plot!(p, years, s.(years); color=:lightgrey, alpha=0.5, linewidth=0.5)
    end
    p
end
```


# Draw Samples from Storm Surge and Discount rate



```{julia}
function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.5))
    ξ = rand(Normal(0.1, 0.05))
    GeneralizedExtremeValue(μ, σ, ξ)
end
```

We can then call this function many times to get many different distributions for the storm surge.
For example,

```{julia}
[draw_surge_distribution() for _ in 1:1000]
```


```{julia}
#| output: false
function draw_discount_rate()
    return rand(Normal(0.04, 0.02))
end
```

```{julia}
p = ModelParams(
    house=house,
    years=2024:2083
)

sow = SOW(
    rand(slr_scenarios),
    draw_surge_distribution(),
    draw_discount_rate()
)

a = Action(3.0u"ft")

res = run_sim(a, sow, p)
```

```{julia}
restrack=[];
itrack = [];
for i = 1:100
    sow = SOW(
        rand(slr_scenarios),
        draw_surge_distribution(),
        draw_discount_rate()
    )
    res = run_sim(a, sow, p)
    push!(restrack, res)
    push!(itrack, i)
end

# find the 25th quantile of restrack
q25 = quantile(restrack, 0.25)
# find the 75th quantile of restrack
q75 = quantile(restrack, 0.75)
q50 = quantile(restrack, 0.50)
# plot restrack and quantiles
plot(itrack, restrack, label="Simulated Results", xlabel="Iteration", ylabel="Cost (USD)", legend=:bottomright)
hline!([q25], label="25th Quantile", color=:red)
hline!([q50], label="50th Quantile", color=:black)
hline!([q75], label="75th Quantile", color=:red)
annotate!(25, q50-100000, text("Mean = $q50", :left, 10, :black))
plot!(title="Simulated Results")
# shade in the vlaues of y between q25 and q75

```

```{julia}

action_dist = [0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5]
sows = [SOW(rand(slr_scenarios), draw_surge_distribution(), draw_discount_rate()) for _ in 1:500] # for 10 SOWs
actions = [Action(rand(action_dist)*u"ft") for _ in 1:500] # these are all the same
results = [run_sim(a, s, p) for (a, s) in zip(actions, sows)]
```

```{julia}
df = DataFrame(
    npv=results,
    Δh_ft=[a.Δh_ft for a in actions],
    slr_a=[s.slr.a for s in sows],
    slr_b=[s.slr.b for s in sows],
    slr_c=[s.slr.c for s in sows],
    slr_tstar=[s.slr.tstar for s in sows],
    slr_cstar=[s.slr.cstar for s in sows],
    surge_μ=[s.surge_dist.μ for s in sows],
    surge_σ=[s.surge_dist.σ for s in sows],
    surge_ξ=[s.surge_dist.ξ for s in sows],
    discount_rate=[s.discount_rate for s in sows],
)
```


```{julia}
# plot df Δh_ft vs df npv
scatter(df.Δh_ft, df.npv, xlabel="Δh (ft)", ylabel="NPV (USD)", legend=false)
```

```{julia}
surge_dist_2 = GeneralizedExtremeValue(4, 1.5, 0.1)
action_dist = [0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5]
sows = [SOW(rand(slr_scenarios), surge_dist_2, draw_discount_rate()) for _ in 1:500] # for 10 SOWs
actions = [Action(rand(action_dist)*u"ft") for _ in 1:500] # these are all the same
results = [run_sim(a, s, p) for (a, s) in zip(actions, sows)]
```

```{julia}
df = DataFrame(
    npv=results,
    Δh_ft=[a.Δh_ft for a in actions],
    slr_a=[s.slr.a for s in sows],
    slr_b=[s.slr.b for s in sows],
    slr_c=[s.slr.c for s in sows],
    slr_tstar=[s.slr.tstar for s in sows],
    slr_cstar=[s.slr.cstar for s in sows],
    surge_μ=[s.surge_dist.μ for s in sows],
    surge_σ=[s.surge_dist.σ for s in sows],
    surge_ξ=[s.surge_dist.ξ for s in sows],
    discount_rate=[s.discount_rate for s in sows],
)
```


```{julia}
# plot df Δh_ft vs df npv

scat2 = scatter(df.Δh_ft, df.npv, xlabel="Δh (ft)", ylabel="NPV (USD)", legend=false)
# plot the distribution surge_dist_2
plot2 = plot(surge_dist_2; label="Surge Distribution", color=:red, xlims=(-5,25), ylims=(0,0.3))
subplot2 = plot(scat2, plot2, layout=(1, 2))
```

```{julia}
surge_dist_3 = GeneralizedExtremeValue(7, 1.5, 0.1)
action_dist = [0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5]
sows = [SOW(rand(slr_scenarios), surge_dist_3, draw_discount_rate()) for _ in 1:500] # for 10 SOWs
actions = [Action(rand(action_dist)*u"ft") for _ in 1:500] # these are all the same
results = [run_sim(a, s, p) for (a, s) in zip(actions, sows)]
```

```{julia}
df = DataFrame(
    npv=results,
    Δh_ft=[a.Δh_ft for a in actions],
    slr_a=[s.slr.a for s in sows],
    slr_b=[s.slr.b for s in sows],
    slr_c=[s.slr.c for s in sows],
    slr_tstar=[s.slr.tstar for s in sows],
    slr_cstar=[s.slr.cstar for s in sows],
    surge_μ=[s.surge_dist.μ for s in sows],
    surge_σ=[s.surge_dist.σ for s in sows],
    surge_ξ=[s.surge_dist.ξ for s in sows],
    discount_rate=[s.discount_rate for s in sows],
)
```


```{julia}
# plot df Δh_ft vs df npv

scat3 = scatter(df.Δh_ft, df.npv, xlabel="Δh (ft)", ylabel="NPV (USD)", legend=false)
# plot the distribution surge_dist_2
plot3 = plot(surge_dist_3; label="Surge Distribution", color=:red, xlims=(-5,25), ylims=(0,0.3))
subplot3 = plot(scat3, plot3, layout=(1, 2))
```

```{julia}
surge_dist_4 = GeneralizedExtremeValue(15, 1.5, 0.1)
action_dist = [0, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5]
sows = [SOW(rand(slr_scenarios), surge_dist_3, draw_discount_rate()) for _ in 1:500] # for 10 SOWs
actions = [Action(rand(action_dist)*u"ft") for _ in 1:500] # these are all the same
results = [run_sim(a, s, p) for (a, s) in zip(actions, sows)]
```

```{julia}
df = DataFrame(
    npv=results,
    Δh_ft=[a.Δh_ft for a in actions],
    slr_a=[s.slr.a for s in sows],
    slr_b=[s.slr.b for s in sows],
    slr_c=[s.slr.c for s in sows],
    slr_tstar=[s.slr.tstar for s in sows],
    slr_cstar=[s.slr.cstar for s in sows],
    surge_μ=[s.surge_dist.μ for s in sows],
    surge_σ=[s.surge_dist.σ for s in sows],
    surge_ξ=[s.surge_dist.ξ for s in sows],
    discount_rate=[s.discount_rate for s in sows],
)
```


```{julia}
# plot df Δh_ft vs df npv

scat4 = scatter(df.Δh_ft, df.npv, xlabel="Δh (ft)", ylabel="NPV (USD)", legend=false)
# plot the distribution surge_dist_2
plot4 = plot(surge_dist_4; label="Surge Distribution", color=:red, xlims=(-5,25), ylims=(0,0.3))
subplot4 = plot(scat4, plot4, layout=(1, 2))
```



```{julia}
subplotend = plot(subplot2, subplot4, layout=(2,1))
```

```{julia}
```

```{julia}
```